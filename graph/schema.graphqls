# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Campaign {
    id: ID!
    campaignNodes: [CampaignNode!]!
    owner: User!

    title: String!
    description: String

    gms: [User!]!
    players: [User!]!

    notes: [String!]!
}

enum PlayerType {
    Gm,
    Player
}

type CampaignNode {
    id: ID!
    title: String!
    campaign: Campaign!

    # Campaign Information
    visited: [User!]!
    transit: [Transition!]!

    # Node information
    label: String!  # A shorter identifier than the title, for quick identification by the end users.
    description: String
    notes: [String!]!
}

type Transition {
    id: ID!
    title: String!

    # Transitions
    from: CampaignNode!
    to: CampaignNode!

    transitionType: TransitionType!
    description: String!
}

enum TransitionType {
    Clue
    Temporal
    Geographic
    Randomly
    Proactively
    Hybrid
    PlayerDriven
}

type User {
    id: ID!
    name: String!
    email: String!

    campaigns: [Campaign!]!
}

type AuthTokens {
    access: String!
    refresh: String!
}

type Query {
    campaign(id: ID!): Campaign!
    user(id: ID!): User!
    login(email: String!, password: String!): AuthTokens!
    refresh(refreshToken: String!): AuthTokens!
}

input CampaignInput {
    title: String
    description: String

    notes: [String!]
}

input CampaignNodeInput {
    title: String
}

input TransitionInput {
    title: String
    description: String

    fromNode: ID
    toNode: ID

    transitionType: TransitionType
}

type Mutation {
    # For managing the campaign
    campaignCreate(input: CampaignInput): Campaign!
    campaignUpdate(id: ID!, input: CampaignInput): Campaign!
    campaignDelete(id: ID!): Campaign!
    # For managing users of a campaign
    campaignRegisterUser(id: ID!, userId: ID!, playerType: PlayerType!): Campaign!
    campaignRemoveUser(id: ID!, userId: ID!): Campaign!
    campaignChangeOwner(id: ID!, newOwner: ID!): Campaign!

    campaignNodeCreate(input: CampaignNodeInput): CampaignNode!
    campaignNodeUpdate(id: ID!, input: CampaignNodeInput): CampaignNode!
    campaignNodeDelete(id: ID!): CampaignNode!

    transitionCreate(input: TransitionInput): Transition!
    transitionUpdate(id: ID!, input: TransitionInput): Transition!
    transitionDelete(id: ID!): Transition!

    userRegister(input: NewUserInput!): User!
}

input NewUserInput {
    username: String!
    password: String!,
    email: String!
}
